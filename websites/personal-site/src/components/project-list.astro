---
import { If, Foreach } from '@marmadilemanteater/astro-logic-components'
import type { Project, ProjectButton } from '@marmadilemanteater/dataservice/projects'
import type { Tag } from '@marmadilemanteater/dataservice/tags'
import type { HTMLAttributes } from 'astro/types'
import Emoji from './emoji.astro'
import TagList from './tag-list.astro'
import { formatLongDate, formatShortDate } from '../helpers'

type ProjectPlus = Project & { 
  /** the index of this item in the original JSON */ 
  featuredIndex: number 
}

type SortType = 'updated'|'featured'|'stars'

interface Props extends HTMLAttributes<'section'> {
  projects: Project[],
  tags: Tag[],
  sortType?: SortType,
  startOffset?: number,
  class: string|undefined
}

const { projects, tags, sortType, startOffset = 0, ...rest }: Props = Astro.props
delete rest['class']

const projectsPlus = projects.map((project, i) => {
  const plus = project as ProjectPlus
  plus.featuredIndex = i
  return plus
})

export function getProjectsSort(sortType: SortType) {
  return function (a: Project, b: Project) {
    let aCmp = 0
    let bCmp = 0
    if (sortType === 'updated') {
      aCmp = new Date(a.lastUpdate).getTime()
      bCmp = new Date(b.lastUpdate).getTime()
    }
    if (sortType === 'stars') {
      aCmp = a.ghStars
      bCmp = b.ghStars
    }
    return bCmp - aCmp
  }
}

if (sortType !== 'featured' && sortType !== undefined) {
  projectsPlus.sort(getProjectsSort(sortType))
}
---
<section
  data-sort-type={sortType}
  data-start-offset={startOffset}
  {...rest}
  class={`project-list card-top ${Astro.props.class || ''}`}
>
  <If condition={sortType !== undefined}>
    <nav>
      <strong><em>Sort By:</em></strong>
      <a 
        onclick='sortBy(arguments[0], "featured");'
        href='/projects'
        data-active={sortType === 'featured' ? 'true': 'false'}
        data-select-type='featured'
      ><Emoji emoji='👁' /> featured</a>
      |
      <a
        onclick='sortBy(arguments[0], "updated");'
        href='/projects/updated'
        data-active={sortType === 'updated' ? 'true': 'false'}
        data-select-type='updated'
      ><Emoji emoji='📆' /> updated</a>
      |
      <a
        onclick='sortBy(arguments[0], "stars");'
        href='/projects/stars'
        data-active={sortType === 'stars' ? 'true': 'false'}
        data-select-type='stars'
      ><Emoji emoji='🌠' /> stars</a>
    </nav>
  </If>
  <Foreach
    list={projectsPlus}
  >
    {(project: ProjectPlus, i: number) => {
        const date = new Date(project.lastUpdate)
        const shortDate = formatShortDate(date)
        const longDate = formatLongDate(date)
        const typeOfUpdate = project.pullUpdatedInfoFrom.replace('ts', 'tted to').replace('es', 'ed')
        const thumbnail = `/images/thumbnails/${project.title.replace(/!/g, '').replace(/\?/g, '')}.webp`
        const projectTags = tags.filter(({name} : Tag) => project.tags.indexOf(name) !== -1) 
        const firstLink = project.buttons[0].link
        return <article
          class='project'
          data-updated={new Date(project.lastUpdate).getTime()}
          data-featured={sortType !== undefined ? project.featuredIndex : undefined}
          data-stars={project.ghStars}
          data-even={((i + startOffset) % 2) === 0 ? 'true' : 'false'}
        >
          <div 
            class='image-link'
          >
            <a 
              href={firstLink}
              title={project.title}
            >
              <img src={thumbnail} alt={project.title} />
            </a>
          </div>
          <div
            class='content'
          >
            <TagList tags={projectTags}>      
                <a
                  href={`https://github.com/${project.ghFullName}/stargazers`}
                  aria-label={`${project.ghStars} stargazer${project.ghStars !== 1 ? 's': ''}`}
                  class={project.ghStars !== 0 ? 'emoji tag' : 'hidden tag'}
                >{project.ghStars !== 0? <Emoji>🌠 {project.ghStars}</Emoji> : ''}</a>
            </TagList>
            <h1><a 
              href={firstLink}
              title={project.title}
            >{project.title}</a></h1>
            <summary>{project.summary}</summary>
            <p
              class='button-list'
            >
              <Foreach
                list={project.buttons}
              >
                {(button: ProjectButton) => <>
                  <a
                    href={button.link}
                    title={`${button.prefix} ${button.locationName}`}
                    class='project-button'
                  >{button.prefix}&nbsp;<strong>{button.locationName}</strong> &raquo;</a>
                </>}
              </Foreach>
            </p>
            <p
              class='last-updated'
            ><em>Last {typeOfUpdate}: <a href={project.lastUpdateUrl}><time datetime={shortDate}>{longDate}</time></a></em></p>
          </div>
        </article>
      }
    }
  </Foreach>
  <If condition={sortType !== undefined}>
    <script
      type="text/javascript"
      is:inline
    >
      // 👂 listen to popstate events to keep the sorting in line with the URL
      window.addEventListener('popstate', (event) => {
        let type = document.location.pathname.replace('/projects/', '')
        if (type === '/projects') {
          type = 'featured'
        }
        sortBy(null, type)
      })
      /** @type {Element} */ 
      const parentElement = document.currentScript.parentElement
      const startOffset = parseInt(parentElement.getAttribute('data-start-offset'))
      let sortType = parentElement.getAttribute('data-sort-type')
      /**
       * @callback sortTypeCallback
       * @param {Element} a
       * @param {Element} b
       */
      /**
       * @param {'updated'|'featured'|'stars'} type 
       * @returns {sortTypeCallback} a sort function for elements on the page
       */
      function getSortByTypeCallback(type) {
        return function (a, b) {
          const aNumber = parseInt(a.getAttribute(`data-${type}`))
          const bNumber = parseInt(b.getAttribute(`data-${type}`))
          if (type === 'featured') {// featured is always asc
            return aNumber - bNumber
          }
          return bNumber - aNumber
        }
      }
      /**
       * client side sorting when javascript is enabled 
       * (saves a page reload to do something that needs no more data)
       * @param {Event?} e 
       * @param {string} type 
       */
      function sortBy(e, type) {
        e?.preventDefault()
        if (sortType !== type) {
          const projectElements = Array.from(parentElement.querySelectorAll('article.project'))
          // remove the elements from the parent
          for (const element of projectElements) {
            parentElement.removeChild(element)
          }
          // sort them back into featured to make the result reproducable
          projectElements.sort(getSortByTypeCallback('featured'))
          // sort them into the correct order
          if (type !== 'featured') {
            projectElements.sort(getSortByTypeCallback(type))
          }
          // set the recorded sort type
          sortType = type
          // #region Update the state of the page
          document.title = `Projects - ${type[0].toUpperCase()}${type.substring(1)}`
          if (e !== null) {
            let target = e.target
            // handle cases where user clicks on `img` inside of `a`
            if (target.tagName === 'IMG')
              target = target.parentElement
            history.pushState({}, null, target.href)
          }
          parentElement.querySelectorAll(`a[data-active="true"]:not([data-select-type="${type}"])`).forEach((e) => {
            e.setAttribute('data-active', 'false')
          })
          parentElement.querySelector(`a[data-select-type="${type}"]`).setAttribute('data-active', 'true')
          parentElement.setAttribute('data-sort-type', sortType)
          // #endregion
          // put them back in the parent element
          let i = 0
          for (const element of projectElements) {
            element.setAttribute('data-even', ((i + startOffset) % 2) === 0)
            i++
            parentElement.appendChild(element)
          }
        }
      }
    </script>
  </If>
</section>
<style lang='less' is:global>
  @import url('../variables.less');

  section.project-list nav {
    padding-bottom: 1em;
    padding-top: 1em;
    padding-left: 1em;
    background-color: @bg-light-1;
    user-select: none;
    @media (prefers-color-scheme: dark) {
      background-color: @bg-dark-2;
      color: white;
    }
  }
  section.project-list nav strong {
    @media (max-width: @md-breakpoint) {
      display: block;
    }
  }
  section.project-list nav a {
    padding: 0 1em;
    color: black;
    @media (prefers-color-scheme: dark) {
      color: white;
    }
  }
  section.project-list nav a:nth-child(2) {
    @media (max-width: @md-breakpoint) {
      padding-left: 0;
    }
  }
  section.project-list nav a:hover {
    text-decoration: none;
  }
  section.project-list nav a[data-active="true"] {
    text-decoration: underline;
  }
  section.project-list article {
    display: flex;
    gap: 1em;
    padding: 1em;
    background-color: @bg-light-1;
    color: black;
    @media (prefers-color-scheme: dark) {
      background-color: @bg-dark-2;
      color: white;
    }
    @media (max-width: @md-breakpoint) {
      flex-direction: column;
    }
    @media (max-width: @sm-breakpoint) {
      position: relative;
    }
  }
  section.project-list article[data-even="true"] {
    background-color: @bg-light-2;
    @media (prefers-color-scheme: dark) {
      background-color: @bg-dark-1;
    }
  }
  section.project-list article .image-link {
    width: 190px;
    display: flex;
    align-self: center;
    flex-direction: column;
    flex-shrink: 0;
    @media (max-width: @md-breakpoint) {
      padding-top: 1em;
      padding-bottom: 1em;
    }
  }
  section.project-list article .image-link a {
    display: inline-block;
    text-align: center;
  }
  section.project-list article .image-link img {
    max-width: 170px;
    max-height: 170px;
  }
  section.project-list .content {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  section.project-list article h1 {
    margin-top: 0;
  }
  section.project-list article h1 a {
    color: black;
    @media (prefers-color-scheme: dark) {
      color: white;
    }
  }
  section.project-list article .last-updated {
    margin-bottom: 0.5em;
    margin-top: 0.5em;
    color: @date-text-light;
    @media (prefers-color-scheme: dark) {
      color: @date-text-dark;
    }
  }
  .emoji.tag {
    @media (max-width: @sm-breakpoint) {
      position: absolute;
      top: 1em;
      right: 1em;
    }
  }
  section.project-list article p.button-list {
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
  }
  section.project-list article .project-button {
    position: relative;
    display: inline-block;
    white-space: nowrap;
    padding: 1em;
    border-radius: 0.75em;
    background-color: @button-light;
    z-index: 1;
    padding-bottom: 1.5em;
    color: white;
    @media (prefers-color-scheme: dark) {
      background-color: @tag-dark;
    }
  }
  section.project-list article .project-button:nth-child(even) {
    @media (prefers-color-scheme: light) {
      background-color: darken(@button-light, 15%);
    }
  }
  section.project-list article .project-button::before {
    content: ' ';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 87%;
    border-radius: 0.75em;
    background-color: @button-light-2;
    @media (prefers-color-scheme: dark) {
      background-color: @tag-dark-2;
    }
    z-index: -1;
  }
  section.project-list article .project-button:nth-child(even)::before {
    @media (prefers-color-scheme: light) {
      background-color: darken(@button-light-2, 15%);
    }
  }
</style>
